pipeline {
    agent {
        kubernetes {
            yaml '''
                apiVersion: v1
                kind: Pod
                spec:
                  containers:
                  - name: docker
                    image: docker:dind
                    securityContext:
                      privileged: true
                    env:
                    - name: DOCKER_TLS_CERTDIR
                      value: ""
                    volumeMounts:
                    - mountPath: /var/run/docker.sock
                      name: docker-sock
                  - name: jnlp
                    image: jenkins/inbound-agent:latest
                    volumeMounts:
                    - mountPath: /home/jenkins
                      name: workspace-volume
                  volumes:
                  - name: docker-sock
                    hostPath:
                      path: /var/run/docker.sock
                      type: Socket
                  - name: workspace-volume
                    emptyDir: {}
            '''
        }
    }
    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker-hub-credentials-id')
        DOCKER_IMAGE = "aldemaro14/java-demo-maven-ready:1.0.0"
    }
    
    stages {
        stage('Scan') {
            steps {
                withSonarQubeEnv(installationName: 'sq1') { 
                    sh './mvnw clean org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.0.2155:sonar'
                }
            }
            post {
                success {
                    script {
                        def qgStatus = 'NONE'
                        def waitForQG = true
                        while (waitForQG) {
                            sleep(time: 10, unit: 'SECONDS') // Adjust the timing as needed
                            def qgResponse = httpRequest(url: "${SONARQUBE_URL}/api/qualitygates/project_status?projectKey=yourProjectKey")
                            def qgResult = readJSON text: qgResponse.content
                            qgStatus = qgResult.projectStatus.status
                            waitForQG = (qgStatus == 'NONE' || qgStatus == 'OK')
                        }
                        if (qgStatus != 'OK') {
                            error "Quality Gate failed: ${qgStatus}"
                        }
                    }
                }
            ]
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    sh 'pwd'
                    sh 'docker build -t $DOCKER_IMAGE .'
                    sh 'docker login -u $DOCKERHUB_CREDENTIALS_USR -p $DOCKERHUB_CREDENTIALS_PSW'
                    sh 'docker push $DOCKER_IMAGE'
                }
            }
        }
        stage('Deploy to Development Kubernetes Cluster') {
            steps {
                script {
                    // Switch Kubernetes context to the development cluster
                    sh 'kubectl config use-context dev-cluster-context'

                    // Update the Kubernetes deployment with the new image
                    sh 'kubectl set image deployment/your-deployment your-container=$DOCKER_IMAGE --namespace=your-namespace'
                }
            }
        }
    }
    post {
        always {
            // Clean up Docker credentials
            sh 'docker logout'
        }
    }
}
